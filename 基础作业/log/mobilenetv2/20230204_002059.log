2023-02-04 00:20:59,342 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.12.1+cu102
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1+cu102
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-04 00:20:59,342 - mmcls - INFO - Distributed training: False
2023-02-04 00:20:59,627 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1280,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'CustomDataset'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224, backend='pillow'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1), backend='pillow'),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=64,
    workers_per_gpu=1,
    train=dict(
        type='CustomDataset',
        data_prefix='dataset/',
        ann_file='dataset/flower_dataset_split/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='dataset/',
        ann_file='dataset/flower_dataset_split/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='dataset/',
        ann_file='dataset/flower_dataset_split/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.0001, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', gamma=0.98, step=1)
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=1)
log_config = dict(interval=15, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'pretrained/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = 'flower_cls'
gpu_ids = [0]

2023-02-04 00:20:59,628 - mmcls - INFO - Set random seed to 2064797039, deterministic: False
2023-02-04 00:20:59,721 - mmcls - INFO - initialize MobileNetV2 with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-04 00:20:59,772 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.conv.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.conv.weight - torch.Size([16, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.1.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.conv.weight - torch.Size([96, 16, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.conv.weight - torch.Size([96, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.conv.weight - torch.Size([24, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.conv.weight - torch.Size([24, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.conv.weight - torch.Size([32, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.conv.weight - torch.Size([64, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.conv.weight - torch.Size([160, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.conv.weight - torch.Size([320, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.conv.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv2.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 1280]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-04 00:21:03,005 - mmcls - INFO - load checkpoint from local path: pretrained/mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth
2023-02-04 00:21:03,063 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1280]) from checkpoint, the shape in current model is torch.Size([5, 1280]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-04 00:21:03,064 - mmcls - INFO - Start running, host: root@autodl-container-85b211b6ac-3e1bc24f, work_dir: /root/mmclassification/flower_cls
2023-02-04 00:21:03,064 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 00:21:03,065 - mmcls - INFO - workflow: [('train', 1)], max: 30 epochs
2023-02-04 00:21:03,065 - mmcls - INFO - Checkpoints will be saved to /root/mmclassification/flower_cls by HardDiskBackend.
2023-02-04 00:21:11,694 - mmcls - INFO - Epoch [1][15/36]	lr: 1.000e-04, eta: 0:10:05, time: 0.569, data_time: 0.454, memory: 4850, loss: 1.5788
2023-02-04 00:21:17,801 - mmcls - INFO - Epoch [1][30/36]	lr: 1.000e-04, eta: 0:08:32, time: 0.407, data_time: 0.319, memory: 4850, loss: 1.4450
2023-02-04 00:21:20,081 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 00:21:24,091 - mmcls - INFO - Epoch(val) [1][9]	accuracy_top-1: 69.9301, accuracy_top-5: 100.0000
2023-02-04 00:21:32,298 - mmcls - INFO - Epoch [2][15/36]	lr: 9.800e-05, eta: 0:07:39, time: 0.541, data_time: 0.452, memory: 4850, loss: 1.2403
2023-02-04 00:21:38,121 - mmcls - INFO - Epoch [2][30/36]	lr: 9.800e-05, eta: 0:07:19, time: 0.388, data_time: 0.294, memory: 4850, loss: 1.1490
2023-02-04 00:21:40,161 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 00:21:44,111 - mmcls - INFO - Epoch(val) [2][9]	accuracy_top-1: 84.0909, accuracy_top-5: 100.0000
2023-02-04 00:21:52,548 - mmcls - INFO - Epoch [3][15/36]	lr: 9.604e-05, eta: 0:07:01, time: 0.556, data_time: 0.467, memory: 4850, loss: 0.9887
2023-02-04 00:21:58,875 - mmcls - INFO - Epoch [3][30/36]	lr: 9.604e-05, eta: 0:06:54, time: 0.421, data_time: 0.332, memory: 4850, loss: 0.8945
2023-02-04 00:22:00,970 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 00:22:05,004 - mmcls - INFO - Epoch(val) [3][9]	accuracy_top-1: 88.4615, accuracy_top-5: 100.0000
2023-02-04 00:22:13,374 - mmcls - INFO - Epoch [4][15/36]	lr: 9.412e-05, eta: 0:06:40, time: 0.552, data_time: 0.465, memory: 4850, loss: 0.8269
2023-02-04 00:22:19,489 - mmcls - INFO - Epoch [4][30/36]	lr: 9.412e-05, eta: 0:06:33, time: 0.408, data_time: 0.317, memory: 4850, loss: 0.7687
2023-02-04 00:22:21,498 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 00:22:25,411 - mmcls - INFO - Epoch(val) [4][9]	accuracy_top-1: 90.7343, accuracy_top-5: 100.0000
2023-02-04 00:22:33,560 - mmcls - INFO - Epoch [5][15/36]	lr: 9.224e-05, eta: 0:06:20, time: 0.537, data_time: 0.448, memory: 4850, loss: 0.7071
2023-02-04 00:22:39,608 - mmcls - INFO - Epoch [5][30/36]	lr: 9.224e-05, eta: 0:06:13, time: 0.403, data_time: 0.315, memory: 4850, loss: 0.6481
2023-02-04 00:22:41,817 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 00:22:45,466 - mmcls - INFO - Epoch(val) [5][9]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-04 00:22:53,876 - mmcls - INFO - Epoch [6][15/36]	lr: 9.039e-05, eta: 0:06:03, time: 0.555, data_time: 0.464, memory: 4850, loss: 0.5933
2023-02-04 00:22:59,947 - mmcls - INFO - Epoch [6][30/36]	lr: 9.039e-05, eta: 0:05:56, time: 0.405, data_time: 0.315, memory: 4850, loss: 0.5982
2023-02-04 00:23:02,099 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 00:23:06,038 - mmcls - INFO - Epoch(val) [6][9]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-04 00:23:14,548 - mmcls - INFO - Epoch [7][15/36]	lr: 8.858e-05, eta: 0:05:47, time: 0.561, data_time: 0.472, memory: 4850, loss: 0.5389
2023-02-04 00:23:20,675 - mmcls - INFO - Epoch [7][30/36]	lr: 8.858e-05, eta: 0:05:41, time: 0.408, data_time: 0.321, memory: 4850, loss: 0.5143
2023-02-04 00:23:22,952 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 00:23:26,810 - mmcls - INFO - Epoch(val) [7][9]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-04 00:23:35,070 - mmcls - INFO - Epoch [8][15/36]	lr: 8.681e-05, eta: 0:05:31, time: 0.545, data_time: 0.454, memory: 4850, loss: 0.4845
2023-02-04 00:23:41,380 - mmcls - INFO - Epoch [8][30/36]	lr: 8.681e-05, eta: 0:05:25, time: 0.420, data_time: 0.330, memory: 4850, loss: 0.4678
2023-02-04 00:23:43,575 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 00:23:47,451 - mmcls - INFO - Epoch(val) [8][9]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 00:23:55,625 - mmcls - INFO - Epoch [9][15/36]	lr: 8.508e-05, eta: 0:05:16, time: 0.539, data_time: 0.447, memory: 4850, loss: 0.4791
2023-02-04 00:24:01,668 - mmcls - INFO - Epoch [9][30/36]	lr: 8.508e-05, eta: 0:05:09, time: 0.402, data_time: 0.313, memory: 4850, loss: 0.4367
2023-02-04 00:24:03,883 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 00:24:07,822 - mmcls - INFO - Epoch(val) [9][9]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:24:16,127 - mmcls - INFO - Epoch [10][15/36]	lr: 8.337e-05, eta: 0:05:00, time: 0.548, data_time: 0.454, memory: 4850, loss: 0.3969
2023-02-04 00:24:22,146 - mmcls - INFO - Epoch [10][30/36]	lr: 8.337e-05, eta: 0:04:54, time: 0.401, data_time: 0.311, memory: 4850, loss: 0.4155
2023-02-04 00:24:24,267 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 00:24:28,061 - mmcls - INFO - Epoch(val) [10][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:24:36,304 - mmcls - INFO - Epoch [11][15/36]	lr: 8.171e-05, eta: 0:04:45, time: 0.543, data_time: 0.454, memory: 4850, loss: 0.4003
2023-02-04 00:24:42,272 - mmcls - INFO - Epoch [11][30/36]	lr: 8.171e-05, eta: 0:04:38, time: 0.397, data_time: 0.305, memory: 4850, loss: 0.3845
2023-02-04 00:24:44,610 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-04 00:24:48,319 - mmcls - INFO - Epoch(val) [11][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:24:56,594 - mmcls - INFO - Epoch [12][15/36]	lr: 8.007e-05, eta: 0:04:29, time: 0.546, data_time: 0.455, memory: 4850, loss: 0.3955
2023-02-04 00:25:02,741 - mmcls - INFO - Epoch [12][30/36]	lr: 8.007e-05, eta: 0:04:23, time: 0.410, data_time: 0.322, memory: 4850, loss: 0.3563
2023-02-04 00:25:04,931 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-04 00:25:08,727 - mmcls - INFO - Epoch(val) [12][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:25:17,133 - mmcls - INFO - Epoch [13][15/36]	lr: 7.847e-05, eta: 0:04:15, time: 0.555, data_time: 0.466, memory: 4850, loss: 0.3557
2023-02-04 00:25:23,170 - mmcls - INFO - Epoch [13][30/36]	lr: 7.847e-05, eta: 0:04:09, time: 0.402, data_time: 0.311, memory: 4850, loss: 0.3603
2023-02-04 00:25:25,270 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-04 00:25:29,140 - mmcls - INFO - Epoch(val) [13][9]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:25:37,559 - mmcls - INFO - Epoch [14][15/36]	lr: 7.690e-05, eta: 0:04:00, time: 0.556, data_time: 0.463, memory: 4850, loss: 0.3517
2023-02-04 00:25:43,567 - mmcls - INFO - Epoch [14][30/36]	lr: 7.690e-05, eta: 0:03:54, time: 0.400, data_time: 0.311, memory: 4850, loss: 0.3503
2023-02-04 00:25:45,736 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-04 00:25:49,818 - mmcls - INFO - Epoch(val) [14][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:25:58,037 - mmcls - INFO - Epoch [15][15/36]	lr: 7.536e-05, eta: 0:03:45, time: 0.542, data_time: 0.454, memory: 4850, loss: 0.3388
2023-02-04 00:26:04,106 - mmcls - INFO - Epoch [15][30/36]	lr: 7.536e-05, eta: 0:03:39, time: 0.405, data_time: 0.315, memory: 4850, loss: 0.3346
2023-02-04 00:26:06,362 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-04 00:26:10,405 - mmcls - INFO - Epoch(val) [15][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:26:18,716 - mmcls - INFO - Epoch [16][15/36]	lr: 7.386e-05, eta: 0:03:31, time: 0.548, data_time: 0.461, memory: 4850, loss: 0.3418
2023-02-04 00:26:25,110 - mmcls - INFO - Epoch [16][30/36]	lr: 7.386e-05, eta: 0:03:25, time: 0.426, data_time: 0.334, memory: 4850, loss: 0.3219
2023-02-04 00:26:27,316 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-04 00:26:31,300 - mmcls - INFO - Epoch(val) [16][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:26:39,534 - mmcls - INFO - Epoch [17][15/36]	lr: 7.238e-05, eta: 0:03:16, time: 0.543, data_time: 0.451, memory: 4850, loss: 0.3439
2023-02-04 00:26:45,639 - mmcls - INFO - Epoch [17][30/36]	lr: 7.238e-05, eta: 0:03:10, time: 0.407, data_time: 0.319, memory: 4850, loss: 0.2988
2023-02-04 00:26:47,704 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-04 00:26:51,719 - mmcls - INFO - Epoch(val) [17][9]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:27:00,018 - mmcls - INFO - Epoch [18][15/36]	lr: 7.093e-05, eta: 0:03:02, time: 0.547, data_time: 0.457, memory: 4850, loss: 0.3103
2023-02-04 00:27:06,059 - mmcls - INFO - Epoch [18][30/36]	lr: 7.093e-05, eta: 0:02:55, time: 0.403, data_time: 0.312, memory: 4850, loss: 0.3084
2023-02-04 00:27:08,188 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-04 00:27:12,155 - mmcls - INFO - Epoch(val) [18][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:27:20,733 - mmcls - INFO - Epoch [19][15/36]	lr: 6.951e-05, eta: 0:02:47, time: 0.566, data_time: 0.476, memory: 4850, loss: 0.3012
2023-02-04 00:27:26,983 - mmcls - INFO - Epoch [19][30/36]	lr: 6.951e-05, eta: 0:02:41, time: 0.417, data_time: 0.326, memory: 4850, loss: 0.3151
2023-02-04 00:27:29,208 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-04 00:27:33,344 - mmcls - INFO - Epoch(val) [19][9]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:27:41,626 - mmcls - INFO - Epoch [20][15/36]	lr: 6.812e-05, eta: 0:02:33, time: 0.547, data_time: 0.455, memory: 4850, loss: 0.3126
2023-02-04 00:27:47,828 - mmcls - INFO - Epoch [20][30/36]	lr: 6.812e-05, eta: 0:02:27, time: 0.412, data_time: 0.320, memory: 4850, loss: 0.2705
2023-02-04 00:27:50,023 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-04 00:27:53,952 - mmcls - INFO - Epoch(val) [20][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:28:02,263 - mmcls - INFO - Epoch [21][15/36]	lr: 6.676e-05, eta: 0:02:18, time: 0.548, data_time: 0.459, memory: 4850, loss: 0.2820
2023-02-04 00:28:08,020 - mmcls - INFO - Epoch [21][30/36]	lr: 6.676e-05, eta: 0:02:12, time: 0.383, data_time: 0.295, memory: 4850, loss: 0.3002
2023-02-04 00:28:10,158 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-04 00:28:14,153 - mmcls - INFO - Epoch(val) [21][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:28:22,416 - mmcls - INFO - Epoch [22][15/36]	lr: 6.543e-05, eta: 0:02:03, time: 0.545, data_time: 0.457, memory: 4850, loss: 0.2930
2023-02-04 00:28:28,634 - mmcls - INFO - Epoch [22][30/36]	lr: 6.543e-05, eta: 0:01:57, time: 0.415, data_time: 0.327, memory: 4850, loss: 0.2683
2023-02-04 00:28:30,864 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-04 00:28:34,805 - mmcls - INFO - Epoch(val) [22][9]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 00:28:43,058 - mmcls - INFO - Epoch [23][15/36]	lr: 6.412e-05, eta: 0:01:49, time: 0.544, data_time: 0.455, memory: 4850, loss: 0.2496
2023-02-04 00:28:49,051 - mmcls - INFO - Epoch [23][30/36]	lr: 6.412e-05, eta: 0:01:43, time: 0.400, data_time: 0.310, memory: 4850, loss: 0.2792
2023-02-04 00:28:51,309 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-04 00:28:55,250 - mmcls - INFO - Epoch(val) [23][9]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:29:03,535 - mmcls - INFO - Epoch [24][15/36]	lr: 6.283e-05, eta: 0:01:34, time: 0.546, data_time: 0.460, memory: 4850, loss: 0.2844
2023-02-04 00:29:09,603 - mmcls - INFO - Epoch [24][30/36]	lr: 6.283e-05, eta: 0:01:28, time: 0.404, data_time: 0.315, memory: 4850, loss: 0.2702
2023-02-04 00:29:11,594 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-04 00:29:15,547 - mmcls - INFO - Epoch(val) [24][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:29:23,833 - mmcls - INFO - Epoch [25][15/36]	lr: 6.158e-05, eta: 0:01:20, time: 0.547, data_time: 0.458, memory: 4850, loss: 0.2834
2023-02-04 00:29:30,243 - mmcls - INFO - Epoch [25][30/36]	lr: 6.158e-05, eta: 0:01:14, time: 0.427, data_time: 0.338, memory: 4850, loss: 0.2912
2023-02-04 00:29:32,304 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-04 00:29:36,186 - mmcls - INFO - Epoch(val) [25][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:29:44,499 - mmcls - INFO - Epoch [26][15/36]	lr: 6.035e-05, eta: 0:01:06, time: 0.548, data_time: 0.459, memory: 4850, loss: 0.3055
2023-02-04 00:29:50,618 - mmcls - INFO - Epoch [26][30/36]	lr: 6.035e-05, eta: 0:01:00, time: 0.408, data_time: 0.319, memory: 4850, loss: 0.2395
2023-02-04 00:29:52,711 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-04 00:29:56,527 - mmcls - INFO - Epoch(val) [26][9]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 00:30:04,892 - mmcls - INFO - Epoch [27][15/36]	lr: 5.914e-05, eta: 0:00:51, time: 0.551, data_time: 0.459, memory: 4850, loss: 0.2777
2023-02-04 00:30:10,945 - mmcls - INFO - Epoch [27][30/36]	lr: 5.914e-05, eta: 0:00:45, time: 0.404, data_time: 0.314, memory: 4850, loss: 0.2550
2023-02-04 00:30:13,092 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-04 00:30:16,756 - mmcls - INFO - Epoch(val) [27][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:30:25,314 - mmcls - INFO - Epoch [28][15/36]	lr: 5.796e-05, eta: 0:00:37, time: 0.564, data_time: 0.476, memory: 4850, loss: 0.2834
2023-02-04 00:30:31,534 - mmcls - INFO - Epoch [28][30/36]	lr: 5.796e-05, eta: 0:00:31, time: 0.415, data_time: 0.327, memory: 4850, loss: 0.2608
2023-02-04 00:30:33,752 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-04 00:30:37,652 - mmcls - INFO - Epoch(val) [28][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:30:46,152 - mmcls - INFO - Epoch [29][15/36]	lr: 5.680e-05, eta: 0:00:22, time: 0.561, data_time: 0.472, memory: 4850, loss: 0.2595
2023-02-04 00:30:52,207 - mmcls - INFO - Epoch [29][30/36]	lr: 5.680e-05, eta: 0:00:16, time: 0.404, data_time: 0.314, memory: 4850, loss: 0.2453
2023-02-04 00:30:54,483 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-04 00:30:58,302 - mmcls - INFO - Epoch(val) [29][9]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 00:31:06,858 - mmcls - INFO - Epoch [30][15/36]	lr: 5.566e-05, eta: 0:00:08, time: 0.564, data_time: 0.476, memory: 4850, loss: 0.2523
2023-02-04 00:31:12,805 - mmcls - INFO - Epoch [30][30/36]	lr: 5.566e-05, eta: 0:00:02, time: 0.396, data_time: 0.305, memory: 4850, loss: 0.2341
2023-02-04 00:31:14,921 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-04 00:31:18,634 - mmcls - INFO - Epoch(val) [30][9]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
