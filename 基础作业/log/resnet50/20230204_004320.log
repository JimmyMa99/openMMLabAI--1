2023-02-04 00:43:20,824 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.12.1+cu102
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1+cu102
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-04 00:43:20,824 - mmcls - INFO - Distributed training: False
2023-02-04 00:43:21,079 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=2048,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=96,
    workers_per_gpu=1,
    train=dict(
        type='CustomDataset',
        data_prefix='dataset/',
        ann_file='dataset/flower_dataset_split/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='dataset/',
        ann_file='dataset/flower_dataset_split/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='dataset/',
        ann_file='dataset/flower_dataset_split/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.0001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[30, 60, 90])
runner = dict(type='EpochBasedRunner', max_epochs=30)
checkpoint_config = dict(interval=1)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'pretrained/resnet50_8xb32_in1k_20210831-ea4938fc.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = 'flower_cls_resnet50/'
gpu_ids = [0]

2023-02-04 00:43:21,079 - mmcls - INFO - Set random seed to 1160382984, deterministic: False
2023-02-04 00:43:21,365 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-04 00:43:21,597 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 2048]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-04 00:43:24,674 - mmcls - INFO - load checkpoint from local path: pretrained/resnet50_8xb32_in1k_20210831-ea4938fc.pth
2023-02-04 00:43:24,845 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 2048]) from checkpoint, the shape in current model is torch.Size([5, 2048]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-04 00:43:24,847 - mmcls - INFO - Start running, host: root@autodl-container-85b211b6ac-3e1bc24f, work_dir: /root/mmclassification/flower_cls_resnet50
2023-02-04 00:43:24,848 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 00:43:24,848 - mmcls - INFO - workflow: [('train', 1)], max: 30 epochs
2023-02-04 00:43:24,848 - mmcls - INFO - Checkpoints will be saved to /root/mmclassification/flower_cls_resnet50 by HardDiskBackend.
2023-02-04 00:43:33,240 - mmcls - INFO - Epoch [1][10/24]	lr: 1.000e-04, eta: 0:09:37, time: 0.814, data_time: 0.284, memory: 8240, loss: 1.6041
2023-02-04 00:43:38,477 - mmcls - INFO - Epoch [1][20/24]	lr: 1.000e-04, eta: 0:07:48, time: 0.525, data_time: 0.026, memory: 8240, loss: 1.5480
2023-02-04 00:43:40,254 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-04 00:43:44,117 - mmcls - INFO - Epoch(val) [1][6]	accuracy_top-1: 48.9510, accuracy_top-5: 100.0000
2023-02-04 00:43:51,882 - mmcls - INFO - Epoch [2][10/24]	lr: 1.000e-04, eta: 0:07:01, time: 0.751, data_time: 0.270, memory: 8240, loss: 1.4604
2023-02-04 00:43:57,132 - mmcls - INFO - Epoch [2][20/24]	lr: 1.000e-04, eta: 0:06:41, time: 0.525, data_time: 0.026, memory: 8240, loss: 1.3985
2023-02-04 00:43:58,909 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-04 00:44:02,516 - mmcls - INFO - Epoch(val) [2][6]	accuracy_top-1: 75.5245, accuracy_top-5: 100.0000
2023-02-04 00:44:10,242 - mmcls - INFO - Epoch [3][10/24]	lr: 1.000e-04, eta: 0:06:23, time: 0.747, data_time: 0.288, memory: 8240, loss: 1.3188
2023-02-04 00:44:15,491 - mmcls - INFO - Epoch [3][20/24]	lr: 1.000e-04, eta: 0:06:12, time: 0.525, data_time: 0.026, memory: 8240, loss: 1.2573
2023-02-04 00:44:17,258 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-04 00:44:20,721 - mmcls - INFO - Epoch(val) [3][6]	accuracy_top-1: 83.7413, accuracy_top-5: 100.0000
2023-02-04 00:44:28,506 - mmcls - INFO - Epoch [4][10/24]	lr: 1.000e-04, eta: 0:06:01, time: 0.753, data_time: 0.281, memory: 8240, loss: 1.1830
2023-02-04 00:44:33,781 - mmcls - INFO - Epoch [4][20/24]	lr: 1.000e-04, eta: 0:05:52, time: 0.527, data_time: 0.026, memory: 8240, loss: 1.1203
2023-02-04 00:44:35,554 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-04 00:44:39,097 - mmcls - INFO - Epoch(val) [4][6]	accuracy_top-1: 88.2867, accuracy_top-5: 100.0000
2023-02-04 00:44:46,897 - mmcls - INFO - Epoch [5][10/24]	lr: 1.000e-04, eta: 0:05:43, time: 0.754, data_time: 0.294, memory: 8240, loss: 1.0587
2023-02-04 00:44:52,151 - mmcls - INFO - Epoch [5][20/24]	lr: 1.000e-04, eta: 0:05:35, time: 0.525, data_time: 0.026, memory: 8240, loss: 1.0230
2023-02-04 00:44:53,929 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 00:44:57,518 - mmcls - INFO - Epoch(val) [5][6]	accuracy_top-1: 89.6853, accuracy_top-5: 100.0000
2023-02-04 00:45:05,343 - mmcls - INFO - Epoch [6][10/24]	lr: 1.000e-04, eta: 0:05:26, time: 0.757, data_time: 0.285, memory: 8240, loss: 0.9738
2023-02-04 00:45:10,605 - mmcls - INFO - Epoch [6][20/24]	lr: 1.000e-04, eta: 0:05:20, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.9183
2023-02-04 00:45:12,385 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 00:45:15,978 - mmcls - INFO - Epoch(val) [6][6]	accuracy_top-1: 90.5594, accuracy_top-5: 100.0000
2023-02-04 00:45:23,729 - mmcls - INFO - Epoch [7][10/24]	lr: 1.000e-04, eta: 0:05:11, time: 0.750, data_time: 0.297, memory: 8240, loss: 0.8692
2023-02-04 00:45:28,993 - mmcls - INFO - Epoch [7][20/24]	lr: 1.000e-04, eta: 0:05:05, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.8421
2023-02-04 00:45:30,762 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 00:45:34,396 - mmcls - INFO - Epoch(val) [7][6]	accuracy_top-1: 91.2587, accuracy_top-5: 100.0000
2023-02-04 00:45:42,215 - mmcls - INFO - Epoch [8][10/24]	lr: 1.000e-04, eta: 0:04:57, time: 0.757, data_time: 0.276, memory: 8240, loss: 0.7883
2023-02-04 00:45:47,484 - mmcls - INFO - Epoch [8][20/24]	lr: 1.000e-04, eta: 0:04:51, time: 0.526, data_time: 0.025, memory: 8240, loss: 0.7798
2023-02-04 00:45:49,267 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 00:45:53,126 - mmcls - INFO - Epoch(val) [8][6]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-04 00:46:00,968 - mmcls - INFO - Epoch [9][10/24]	lr: 1.000e-04, eta: 0:04:43, time: 0.759, data_time: 0.316, memory: 8240, loss: 0.7302
2023-02-04 00:46:06,239 - mmcls - INFO - Epoch [9][20/24]	lr: 1.000e-04, eta: 0:04:37, time: 0.527, data_time: 0.026, memory: 8240, loss: 0.7057
2023-02-04 00:46:08,022 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 00:46:11,836 - mmcls - INFO - Epoch(val) [9][6]	accuracy_top-1: 91.6084, accuracy_top-5: 100.0000
2023-02-04 00:46:19,698 - mmcls - INFO - Epoch [10][10/24]	lr: 1.000e-04, eta: 0:04:29, time: 0.760, data_time: 0.424, memory: 8240, loss: 0.6752
2023-02-04 00:46:24,981 - mmcls - INFO - Epoch [10][20/24]	lr: 1.000e-04, eta: 0:04:23, time: 0.528, data_time: 0.026, memory: 8240, loss: 0.6601
2023-02-04 00:46:26,760 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 00:46:30,379 - mmcls - INFO - Epoch(val) [10][6]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-04 00:46:38,168 - mmcls - INFO - Epoch [11][10/24]	lr: 1.000e-04, eta: 0:04:15, time: 0.753, data_time: 0.297, memory: 8240, loss: 0.6169
2023-02-04 00:46:43,439 - mmcls - INFO - Epoch [11][20/24]	lr: 1.000e-04, eta: 0:04:10, time: 0.527, data_time: 0.027, memory: 8240, loss: 0.5975
2023-02-04 00:46:45,226 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-04 00:46:48,935 - mmcls - INFO - Epoch(val) [11][6]	accuracy_top-1: 91.9580, accuracy_top-5: 100.0000
2023-02-04 00:46:56,734 - mmcls - INFO - Epoch [12][10/24]	lr: 1.000e-04, eta: 0:04:02, time: 0.754, data_time: 0.291, memory: 8240, loss: 0.6009
2023-02-04 00:47:02,000 - mmcls - INFO - Epoch [12][20/24]	lr: 1.000e-04, eta: 0:03:56, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.5722
2023-02-04 00:47:03,775 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-04 00:47:07,878 - mmcls - INFO - Epoch(val) [12][6]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-04 00:47:15,683 - mmcls - INFO - Epoch [13][10/24]	lr: 1.000e-04, eta: 0:03:49, time: 0.755, data_time: 0.288, memory: 8240, loss: 0.5524
2023-02-04 00:47:20,947 - mmcls - INFO - Epoch [13][20/24]	lr: 1.000e-04, eta: 0:03:43, time: 0.526, data_time: 0.041, memory: 8240, loss: 0.5058
2023-02-04 00:47:22,724 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-04 00:47:26,184 - mmcls - INFO - Epoch(val) [13][6]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-04 00:47:34,020 - mmcls - INFO - Epoch [14][10/24]	lr: 1.000e-04, eta: 0:03:35, time: 0.758, data_time: 0.319, memory: 8240, loss: 0.5178
2023-02-04 00:47:39,281 - mmcls - INFO - Epoch [14][20/24]	lr: 1.000e-04, eta: 0:03:30, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.4981
2023-02-04 00:47:41,055 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-04 00:47:44,807 - mmcls - INFO - Epoch(val) [14][6]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-04 00:47:52,648 - mmcls - INFO - Epoch [15][10/24]	lr: 1.000e-04, eta: 0:03:22, time: 0.759, data_time: 0.272, memory: 8240, loss: 0.5060
2023-02-04 00:47:57,929 - mmcls - INFO - Epoch [15][20/24]	lr: 1.000e-04, eta: 0:03:17, time: 0.530, data_time: 0.026, memory: 8240, loss: 0.4636
2023-02-04 00:47:59,716 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-04 00:48:03,780 - mmcls - INFO - Epoch(val) [15][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-04 00:48:11,590 - mmcls - INFO - Epoch [16][10/24]	lr: 1.000e-04, eta: 0:03:09, time: 0.755, data_time: 0.281, memory: 8240, loss: 0.4626
2023-02-04 00:48:16,865 - mmcls - INFO - Epoch [16][20/24]	lr: 1.000e-04, eta: 0:03:03, time: 0.528, data_time: 0.026, memory: 8240, loss: 0.4453
2023-02-04 00:48:18,647 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-04 00:48:22,270 - mmcls - INFO - Epoch(val) [16][6]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-04 00:48:30,059 - mmcls - INFO - Epoch [17][10/24]	lr: 1.000e-04, eta: 0:02:56, time: 0.753, data_time: 0.282, memory: 8240, loss: 0.4481
2023-02-04 00:48:35,329 - mmcls - INFO - Epoch [17][20/24]	lr: 1.000e-04, eta: 0:02:50, time: 0.527, data_time: 0.026, memory: 8240, loss: 0.4261
2023-02-04 00:48:37,105 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-04 00:48:40,653 - mmcls - INFO - Epoch(val) [17][6]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-04 00:48:48,447 - mmcls - INFO - Epoch [18][10/24]	lr: 1.000e-04, eta: 0:02:43, time: 0.754, data_time: 0.292, memory: 8240, loss: 0.4150
2023-02-04 00:48:53,706 - mmcls - INFO - Epoch [18][20/24]	lr: 1.000e-04, eta: 0:02:37, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.4030
2023-02-04 00:48:55,491 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-04 00:48:59,327 - mmcls - INFO - Epoch(val) [18][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-04 00:49:07,151 - mmcls - INFO - Epoch [19][10/24]	lr: 1.000e-04, eta: 0:02:30, time: 0.757, data_time: 0.278, memory: 8240, loss: 0.4115
2023-02-04 00:49:12,442 - mmcls - INFO - Epoch [19][20/24]	lr: 1.000e-04, eta: 0:02:24, time: 0.529, data_time: 0.026, memory: 8240, loss: 0.3913
2023-02-04 00:49:14,227 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-04 00:49:18,267 - mmcls - INFO - Epoch(val) [19][6]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-04 00:49:26,033 - mmcls - INFO - Epoch [20][10/24]	lr: 1.000e-04, eta: 0:02:17, time: 0.751, data_time: 0.263, memory: 8240, loss: 0.3908
2023-02-04 00:49:31,298 - mmcls - INFO - Epoch [20][20/24]	lr: 1.000e-04, eta: 0:02:11, time: 0.527, data_time: 0.026, memory: 8240, loss: 0.3792
2023-02-04 00:49:33,078 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-04 00:49:36,803 - mmcls - INFO - Epoch(val) [20][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-04 00:49:44,532 - mmcls - INFO - Epoch [21][10/24]	lr: 1.000e-04, eta: 0:02:04, time: 0.747, data_time: 0.265, memory: 8240, loss: 0.3651
2023-02-04 00:49:49,794 - mmcls - INFO - Epoch [21][20/24]	lr: 1.000e-04, eta: 0:01:58, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.3772
2023-02-04 00:49:51,570 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-04 00:49:55,363 - mmcls - INFO - Epoch(val) [21][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-04 00:50:03,193 - mmcls - INFO - Epoch [22][10/24]	lr: 1.000e-04, eta: 0:01:51, time: 0.757, data_time: 0.289, memory: 8240, loss: 0.3676
2023-02-04 00:50:08,457 - mmcls - INFO - Epoch [22][20/24]	lr: 1.000e-04, eta: 0:01:45, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.3437
2023-02-04 00:50:10,233 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-04 00:50:13,848 - mmcls - INFO - Epoch(val) [22][6]	accuracy_top-1: 92.8322, accuracy_top-5: 100.0000
2023-02-04 00:50:21,625 - mmcls - INFO - Epoch [23][10/24]	lr: 1.000e-04, eta: 0:01:38, time: 0.752, data_time: 0.261, memory: 8240, loss: 0.3508
2023-02-04 00:50:26,895 - mmcls - INFO - Epoch [23][20/24]	lr: 1.000e-04, eta: 0:01:32, time: 0.527, data_time: 0.026, memory: 8240, loss: 0.3523
2023-02-04 00:50:28,670 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-04 00:50:32,336 - mmcls - INFO - Epoch(val) [23][6]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 00:50:40,111 - mmcls - INFO - Epoch [24][10/24]	lr: 1.000e-04, eta: 0:01:25, time: 0.752, data_time: 0.278, memory: 8240, loss: 0.3500
2023-02-04 00:50:45,365 - mmcls - INFO - Epoch [24][20/24]	lr: 1.000e-04, eta: 0:01:19, time: 0.525, data_time: 0.026, memory: 8240, loss: 0.3378
2023-02-04 00:50:47,139 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-04 00:50:50,708 - mmcls - INFO - Epoch(val) [24][6]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 00:50:58,471 - mmcls - INFO - Epoch [25][10/24]	lr: 1.000e-04, eta: 0:01:12, time: 0.751, data_time: 0.264, memory: 8240, loss: 0.3147
2023-02-04 00:51:03,753 - mmcls - INFO - Epoch [25][20/24]	lr: 1.000e-04, eta: 0:01:06, time: 0.528, data_time: 0.026, memory: 8240, loss: 0.3157
2023-02-04 00:51:05,540 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-04 00:51:09,503 - mmcls - INFO - Epoch(val) [25][6]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 00:51:17,267 - mmcls - INFO - Epoch [26][10/24]	lr: 1.000e-04, eta: 0:00:59, time: 0.751, data_time: 0.272, memory: 8240, loss: 0.3240
2023-02-04 00:51:22,530 - mmcls - INFO - Epoch [26][20/24]	lr: 1.000e-04, eta: 0:00:53, time: 0.527, data_time: 0.027, memory: 8240, loss: 0.2974
2023-02-04 00:51:24,316 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-04 00:51:27,709 - mmcls - INFO - Epoch(val) [26][6]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-04 00:51:35,523 - mmcls - INFO - Epoch [27][10/24]	lr: 1.000e-04, eta: 0:00:46, time: 0.756, data_time: 0.301, memory: 8240, loss: 0.3106
2023-02-04 00:51:40,788 - mmcls - INFO - Epoch [27][20/24]	lr: 1.000e-04, eta: 0:00:40, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.3162
2023-02-04 00:51:42,568 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-04 00:51:46,026 - mmcls - INFO - Epoch(val) [27][6]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-04 00:51:53,803 - mmcls - INFO - Epoch [28][10/24]	lr: 1.000e-04, eta: 0:00:33, time: 0.752, data_time: 0.279, memory: 8240, loss: 0.2923
2023-02-04 00:51:59,065 - mmcls - INFO - Epoch [28][20/24]	lr: 1.000e-04, eta: 0:00:27, time: 0.526, data_time: 0.026, memory: 8240, loss: 0.2954
2023-02-04 00:52:00,847 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-04 00:52:04,775 - mmcls - INFO - Epoch(val) [28][6]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-04 00:52:12,527 - mmcls - INFO - Epoch [29][10/24]	lr: 1.000e-04, eta: 0:00:20, time: 0.750, data_time: 0.267, memory: 8240, loss: 0.2903
2023-02-04 00:52:17,792 - mmcls - INFO - Epoch [29][20/24]	lr: 1.000e-04, eta: 0:00:15, time: 0.527, data_time: 0.026, memory: 8240, loss: 0.2997
2023-02-04 00:52:19,564 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-04 00:52:23,346 - mmcls - INFO - Epoch(val) [29][6]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-04 00:52:31,114 - mmcls - INFO - Epoch [30][10/24]	lr: 1.000e-04, eta: 0:00:07, time: 0.751, data_time: 0.268, memory: 8240, loss: 0.2873
2023-02-04 00:52:36,367 - mmcls - INFO - Epoch [30][20/24]	lr: 1.000e-04, eta: 0:00:02, time: 0.525, data_time: 0.026, memory: 8240, loss: 0.2754
2023-02-04 00:52:38,137 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-04 00:52:41,757 - mmcls - INFO - Epoch(val) [30][6]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
